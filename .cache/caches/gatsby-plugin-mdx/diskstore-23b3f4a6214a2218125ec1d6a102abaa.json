{"expireTime":9007200818910844000,"key":"gatsby-plugin-mdx-entire-payload-11614eac8eabc3f636bca2f3cde44a8c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { CodeWave } from \"gatsby-theme-waves\"","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":46,"offset":46},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":4,"column":1,"offset":48},"end":{"line":4,"column":4,"offset":51},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quality assurance","position":{"start":{"line":6,"column":4,"offset":56},"end":{"line":6,"column":21,"offset":73},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":53},"end":{"line":6,"column":21,"offset":73},"indent":[]}},{"type":"code","lang":"markdown","meta":null,"value":"* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb ","position":{"start":{"line":8,"column":1,"offset":75},"end":{"line":16,"column":4,"offset":279},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Continual improvement","position":{"start":{"line":19,"column":4,"offset":285},"end":{"line":19,"column":25,"offset":306},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":282},"end":{"line":19,"column":25,"offset":306},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Continual review of quality efforts, at all stages of the project pipeline.\nEncourages the business to think outside of requirements, and understand the beenfits of an exploratory mindset.","position":{"start":{"line":21,"column":1,"offset":308},"end":{"line":22,"column":113,"offset":496},"indent":[1]}}],"position":{"start":{"line":21,"column":1,"offset":308},"end":{"line":22,"column":113,"offset":496},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {\"blog-title\":\"jaffamonkey\",\"title\":\"Quality assurance\"}","position":{"start":{"line":26,"column":1,"offset":500},"end":{"line":26,"column":85,"offset":584},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":26,"column":85,"offset":584}}},"scopeImports":["import { CodeWave } from \"gatsby-theme-waves\"","import React from 'react'"],"scopeIdentifiers":["CodeWave","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"blog-title\": \"jaffamonkey\",\n  \"title\": \"Quality assurance\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"quality-assurance\"\n  }, \"Quality assurance\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"* Quality assurance blurb \\n* Quality assurance blurb \\n* Quality assurance blurb \\n* Quality assurance blurb \\n* Quality assurance blurb \\n* Quality assurance blurb \\n* Quality assurance blurb \\n\")), mdx(\"h2\", {\n    \"id\": \"continual-improvement\"\n  }, \"Continual improvement\"), mdx(\"p\", null, \"Continual review of quality efforts, at all stages of the project pipeline.\\nEncourages the business to think outside of requirements, and understand the beenfits of an exploratory mindset.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport { CodeWave } from \"gatsby-theme-waves\"\nexport const _frontmatter = {\"blog-title\":\"jaffamonkey\",\"title\":\"Quality assurance\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"quality-assurance\"\n    }}>{`Quality assurance`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-markdown\"\n      }}>{`* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n* Quality assurance blurb \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"continual-improvement\"\n    }}>{`Continual improvement`}</h2>\n    <p>{`Continual review of quality efforts, at all stages of the project pipeline.\nEncourages the business to think outside of requirements, and understand the beenfits of an exploratory mindset.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}