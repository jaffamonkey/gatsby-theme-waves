{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/testengineering","webpackCompilationHash":"a730afe78e2ad9aefd49","result":{"data":{"post":{"id":"716e520d-9a68-5ad9-b01d-07e14f0593a7","title":"Test engineering","date":null,"excerpt":"Test automation is only part of the path that leads to better quality with CI and CD. When building and maintaining a test framework it…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"blog-title\": \"jaffamonkey\",\n  \"title\": \"Test engineering\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"Test automation is only part of the path that leads to better quality with CI and CD.\"), mdx(\"p\", null, \"When building and maintaining a test framework it should always be optimal.\"), mdx(\"h3\", {\n    \"id\": \"this-means-no-clunk-clutter-or-useless-tests\"\n  }, \"This means no clunk, clutter or useless tests.\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ curl -s -v -o /dev/null -I -w \\\"%{http_code}\\\" http://jaffamonkey.com\\n*   Trying 35.169.225.248...\\n* TCP_NODELAY set\\n* Expire in 149999 ms for 3 (transfer 0x55a114e985c0)\\n* Expire in 200 ms for 4 (transfer 0x55a114e985c0)\\n* Connected to jaffamonkey.com (35.169.225.248) port 80 (#0)\\n> HEAD / HTTP/1.1\\n> Host: jaffamonkey.com\\n> User-Agent: curl/7.64.0\\n> Accept: */*\\n> \\n< HTTP/1.1 301 Moved Permanently\\n< Date: Fri, 26 Jul 2019 11:49:40 GMT\\n< Connection:Keep-Alive\\n< Content-Length: 0\\n< Cache-Control: private, no-cache, no-store, max-age=0\\n< Expires: Mon, 01 Jan 1990 0:00:00 GMT\\n< Location: https://jaffamonkey.netlify.com\\n< \\n* Connection #0 to host jaffamonkey.com left intact\\n\")), mdx(\"h2\", {\n    \"id\": \"how-to-test\"\n  }, \"How to test\"), mdx(\"p\", null, \"It\\u2019s all about what\\u2019s appropriate, to both development and business sides to a project.\"), mdx(\"p\", null, \"Sometimes investing is a feature-rich test framework is a good idea. \"), mdx(\"p\", null, \"A test framework that is well-thought out and maintained, will retain usefulness for the whole team.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"1:13\",\n    \"1:13\": true\n  }), \"$ npm install -g assert superagent\\n\\n// test-api.js\\nconst superagent = require('superagent');\\nconst assert = require('assert');\\n\\nsuperagent\\n  .get('http://localhost:3001/api/v1/todos')\\n  .end((err, res) => {\\n    assert.ifError(err);\\n    assert.equal(res.status, 200);\\n    console.log('Result: ' + res.text)\\n    });\\n\\n$ node test-api.js\\nResult: {\\\"success\\\":\\\"true\\\",\\\"message\\\":\\\"todos retrieved successfully\\\",\\\"todos\\\":[{\\\"id\\\":1,\\\"title\\\":\\\"example\\\"}]}\\n\")), mdx(\"p\", null, \"But if you have the build pipepline in sights, then you had better make sure tests run as lean (fast) as possible.\"), mdx(\"p\", null, \"Test engineering is where Testing meets (Dev)Ops!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\",\n    \"metastring\": \"15:17\",\n    \"15:17\": true\n  }), \"$ npm install -g assert superagent\\n\\n// test-api.js\\nconst superagent = require('superagent');\\nconst assert = require('assert');\\n\\nsuperagent\\n  .get('http://localhost:3001/api/v1/todos')\\n  .end((err, res) => {\\n    assert.ifError(err);\\n    assert.equal(res.status, 200);\\n    console.log('Result: ' + res.text)\\n    });\\n\\n$ node test-api.js\\nResult: {\\\"success\\\":\\\"true\\\",\\\"message\\\":\\\"todos retrieved successfully\\\",\\\"todos\\\":[{\\\"id\\\":1,\\\"title\\\":\\\"example\\\"}]}\\n\")), mdx(\"h2\", {\n    \"id\": \"native-code-or-package\"\n  }, \"Native code or package?\"), mdx(\"p\", null, \"Writing test code is easier, and there is a raft of packages to help you \\u2026 or hinder you. \"), mdx(\"p\", null, \"Start with too many packages, then you will quickly end up with an unused test framework.\"), mdx(\"p\", null, \"Start small - don\\u2019t use a package if it can be coded natively.\"), mdx(\"p\", null, \"Conversely, don\\u2019t waste too much time on native code - packages are there too help you, just be selective.\"), mdx(\"p\", null, \"The API test is a very basic example, but step up to UI tests (with reporting) and already complexitiy increases.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo: required // Some installation actions require administrator-level access\\ndist: trusty // Builds a mininal machine to runs tests on\\n\\naddons:\\n  chrome: stable // installs latest stable Chrome\\n\\nlanguage: node_js // define primary platform language\\n\\nnode_js:\\n  - '11' // define primary platform language version\\n  \\nbranches:\\n  only:\\n  - travis-ci // Specifies that only the 'travis-ci' branch will be used\\n  \\nbefore_script:\\n  - npm install chromedriver // install chromedriver, the browser interaction service for Chrome\\n  \\nscript:\\n  - node test.js // run the tests\\n\")), mdx(\"h2\", {\n    \"id\": \"devops\"\n  }, \"DevOps\"), mdx(\"p\", null, \"Commonly test engineers touch on the area of DevOps only as far as the build server.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"jaffamonkey"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"716e520d-9a68-5ad9-b01d-07e14f0593a7","excerpt":"Test automation is only part of the path that leads to better quality with CI and CD. When building and maintaining a test framework it…","slug":"/testengineering","title":"Test engineering","date":null,"siteTitle":"jaffamonkey","socialLinks":[{"name":"twitter","url":"https://twitter.com/jaffamonkey"},{"name":"github","url":"https://github.com/jaffamonkey"},{"name":"linkedin","url":"https://www.linkedin.com/in/jaffamonkey"},{"name":"sms","url":"sms:+6612345678?body="},{"name":"email (if you must)","url":"mailto:paullittlebury@gmail.com"}],"previous":{"node":{"id":"9d5d4e77-9ddb-58b8-855c-ce3de996a9ec","excerpt":"Part of the \"zero to vanilla quality engineer\" workshop (zero, as in zero prior knowledge) I have tried to use as few tools and helpers as…","slug":"/trainingcourse","title":"Test engineering workhop","date":null}},"next":{"node":{"id":"c5ca29fd-50ff-5ed2-beb2-0f941dca1af9","excerpt":"Test coaching Coaching We can show your team how to do Quality Engineering, from the ground up with training that is customed to your…","slug":"/testcoaching","title":"Test coaching","date":null}}}}}