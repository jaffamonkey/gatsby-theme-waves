{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/trainingcourse","webpackCompilationHash":"a730afe78e2ad9aefd49","result":{"data":{"post":{"id":"9d5d4e77-9ddb-58b8-855c-ce3de996a9ec","title":"Test engineering workhop","date":null,"excerpt":"Part of the \"zero to vanilla quality engineer\" workshop (zero, as in zero prior knowledge) I have tried to use as few tools and helpers asâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"blog-title\": \"jaffamonkey\",\n  \"title\": \"Test engineering workhop\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Part of the \\u201Czero to vanilla quality engineer\\u201D workshop (zero, as in zero prior knowledge)\")), mdx(\"p\", null, \"I have tried to use as few tools and helpers as possible to demonstrate a UI testing framework using only selenium-webdriver and chromedriver. And coding will be in JavaScript, though what follows can be done in other programming languages. The only either requirement is having Node and Git installed.\"), mdx(\"p\", null, \"The assumption is you have set up accounts on Github - you can use you GitHub credentials to login to both Travis-CI and Netlify when the time comes.\"), mdx(\"p\", null, \"While it will be important to understand running commands from a Terminal, for this training guide, using the web services will be sufficient.\"), mdx(\"h2\", {\n    \"id\": \"github\"\n  }, \"GitHub\"), mdx(\"p\", null, \"GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.\"), mdx(\"h2\", {\n    \"id\": \"create-a-repo-on-github\"\n  }, \"Create a repo on github\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com\"\n  }), \"Go to GitHub\")), mdx(\"p\", null, \"Github is a service where you can keep your code, and make it available to others. After setting up your account, click the \\u201D+\\u201D symbol in the top-right of the menu bar.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/create-repo.png\",\n    \"alt\": \"Create a github repo\"\n  }))), mdx(\"h2\", {\n    \"id\": \"fill-in-repo-form\"\n  }, \"Fill in repo form\"), mdx(\"p\", null, \"The defaults are ok, but remember to select to add README to add repo info.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/repo-form.png\",\n    \"alt\": \"Create a github repo\"\n  }))), mdx(\"h2\", {\n    \"id\": \"webpage\"\n  }, \"Webpage\"), mdx(\"h3\", {\n    \"id\": \"create-first-html-page\"\n  }, \"Create first HTML page\"), mdx(\"p\", null, \"After creating repo, click \\u201CCreate New File\\u201D and enter filename \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/create-new-file.png\",\n    \"alt\": \"Create a github repo\"\n  }))), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"1\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Now we can start the coding!\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Scroll down to see lines of code highlighted, alongside explanations.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"1\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"DOCTYPE tells the web browser about what version of HTML the page is written in (in this case HTML5)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"2\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The html element tag is called the root element because it contains all the elements in the document\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"3:5\",\n    \"3:5\": true\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The head element tag contains descriptive information about the document itself, such as its title\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"7,20\",\n    \"7,20\": true\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The body element tag contains everything that we want to show up in the browser window.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"11:15\",\n    \"11:15\": true\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Simple form example.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"12\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A text field definition for our search\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"13\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"13\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Add a pre-filled form field value that will be processed with your search terms entered in previous field.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"14\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Add a button element with label text, to submit the form.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"17\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"17\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A basic text hyperlink.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"19\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Insert an image, \\u201Csrc\\u201D value is the path to image file.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"20\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"20\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The closing tag for \\u201Cbody\\u201D.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"21\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"21\"\n  }), \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>A simple website</title>\\n</head>\\n\\n<body>\\n    <h1>Example use of [h1] element tag</h1>\\n    <p>Example use of [p] element tag</p>\\n    <p>A basic form to test search github.com using DuckDuckGo search engine</p>\\n    <form action=\\\"https://duckduckgo.com/\\\">\\n        <input type=\\\"text\\\" name=\\\"q\\\" class=\\\"searchform\\\">\\n        <input type=\\\"hidden\\\" name=\\\"sites\\\" value=\\\"github.com\\\">\\n        <button id=\\\"searchButton\\\" type=\\\"submit\\\">Search</button>\\n    </form>\\n    <h3>Example use of [h3] element tag</h3>\\n    <a href=\\\"https://duckduckgo.com\\\">A test link</a>\\n    <h4>Example image</h4>\\n    <img src=\\\"test.png\\\" alt=\\\"example image\\\"/>\\n</body>\\n</html>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The closing tag for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<html>\"), \".\"))), mdx(\"h2\", {\n    \"id\": \"testing\"\n  }, \"Testing\"), mdx(\"p\", null, \"Now we have a basic web page to test on!\"), mdx(\"h3\", {\n    \"id\": \"what-to-test\"\n  }, \"What to test?\"), mdx(\"p\", null, \"On software development projects, testing work is driven by what the client has asked for.  \"), mdx(\"p\", null, \"This is a continual process that never stops, and it\\u2019s important the tests reflect this. \"), mdx(\"p\", null, \"However this not not mean testers do not manually test - on the contrary, due to the nature of UI test automation, work is constantly validated.\"), mdx(\"p\", null, \"In further training I will go into the other sides of test automation (such as load and security testing) in future training guides.\"), mdx(\"p\", null, \"But also it\\u2019s important to remember to think creatively, and develop other useful tests (this is where developers can help you out, and will be more than happy to!).\"), mdx(\"p\", null, \"What many testers forget, is that most developers welcome dialogue with testers, as they know how helpful they can be.\"), mdx(\"h2\", {\n    \"id\": \"set-up-the-testing-framework\"\n  }, \"Set up the testing framework\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"name\\\": \\\"javascript-chromedriver-test\\\",\\n  \\\"description\\\": \\\"JavaScript and Chromedriver test\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"author\\\": \\\"jaffamonkey <paullittlebury@gmail.com>\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"dependencies\\\": {\\n    \\\"chromedriver\\\": \\\"^2.46.0\\\",\\n    \\\"selenium-webdriver\\\": \\\"^3.5.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"node ./test.js\\\"\\n  }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For convenience to install packages, it is better to create a file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" in the root of your repo, like shown here, then run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npm install\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To install/setup\"))), mdx(\"h2\", {\n    \"id\": \"the-test-file\"\n  }, \"The test file\"), mdx(\"p\", null, \"Create a new file in \\u2018tests\\u2019 folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test.js\"), \". When this code is run, it first fires up Chromes browser, then excecutes the actions in the script.\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\nvar errorMessage = 'Could not locate the correct ';\\n\\n// This is creating an object that is the browser\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Although the purpose of tests varies, the context is similar:\"), mdx(\"ol\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"I do something\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Something happens\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So test steps are (simplified) an action followed by consequence(s) - the consequence is how we verify is a test has passed or failed.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Now lets look at the lines of code in more detail \\u2026\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:3\",\n    \"1:3\": true\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\nvar errorMessage = 'Could not locate the correct ';\\n\\n// This is creating an object that is the browser\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The easiest way to look at this, is it\\u2019s creating an object that\\u2019s webdriver.  Chrome will run the automated tests without UI (good for speed). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headless\"), \" means no browser will be visible on screen. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disable-gpu\"), \" means disable graphics acceleration for Chrome.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"7:15\",\n    \"7:15\": true\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\n\\nvar errorMessage = 'Could not locate the correct ';\\n\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is creating an object that is the browser.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"17:23\",\n    \"17:23\": true\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\n\\nvar errorMessage = 'Could not locate the correct ';\\n\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is the script,  the first line opens up the url, the next lines locate an element and perform an action.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"24:27\",\n    \"24:27\": true\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\n\\nvar errorMessage = 'Could not locate the correct ';\\n\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Any errors caught while performing steps above will output error detail returned to screen.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"28:30\",\n    \"28:30\": true\n  }), \"var webdriver = require('selenium-webdriver'),\\n  By = webdriver.By,\\n  until = webdriver.until;\\n\\nvar errorMessage = 'Could not locate the correct ';\\n\\nconst browser = new webdriver\\n  .Builder()\\n  .usingServer()\\n  .withCapabilities({\\n    'browserName': 'chrome',\\n    'chromeOptions': {\\n      args: ['headless', 'disable-gpu']\\n    }\\n  }).build();\\n\\ntry {\\n  browser.get('http://localhost:8081');\\n  browser.wait(until.elementLocated(By.name('q')), 3000, errorMessage + 'field').sendKeys('TrumpKlon');\\n  browser.wait(until.elementLocated(By.id('searchButton')), 3000, errorMessage + 'button').click();\\n  browser.wait(until.titleIs('TrumpKlon site:github.com at DuckDuckGo'), 3000, errorMessage + 'title')\\n  browser.wait(until.elementLocated(By.partialLinkText('TrumpKlon')), 3000, errorMessage + 'link');\\n}\\ncatch (err) {\\n  console.log(err)\\n  return false;\\n}\\nfinally {\\n  browser.quit();\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Close browser session.\"))), mdx(\"h2\", {\n    \"id\": \"run-the-tests\"\n  }, \"Run the tests\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-bash\",\n    \"metastring\": \"1\"\n  }), \"node ./web/server.js &\\nyour-repo-name/tests>./node_modules/.bin/chromedriver\\nyour-repo-name/tests>node test.js\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Start the website environment up (in background)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-bash\",\n    \"metastring\": \"2\"\n  }), \"node ./web/server.js &\\nyour-repo-name/tests>node test.js\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Now run the tests\"))), mdx(\"h2\", {\n    \"id\": \"branching\"\n  }, \"Branching\"), mdx(\"p\", null, \"At this point we have been working on the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \" branch, but in order to make sure we have a stable pipeline it is better to do work and test on a separate branch. \"), mdx(\"p\", null, \"So now create a branch called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"travis-ci\"), \", which will be used by Travis CI\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to your new repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click the drop down at the top of the file list that says branch: master.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type a branch name, readme-edits, into the new branch text box.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select the blue Create branch box or hit \\u201CEnter\\u201D on your keyboard.\")), mdx(\"h2\", {\n    \"id\": \"travis-build-server\"\n  }, \"Travis Build Server\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://travis-ci.org\"\n  }), \"Go to TravisCI\")), mdx(\"p\", null, \"A build server (also called a continuous integration server (CI server)), is a centralized, stable and reliable environment for building software.\"), mdx(\"p\", null, \"Developers on projects use the build server all the time, as it\\u2019s the place that their code is built and tested.\"), mdx(\"p\", null, \"Now we have the code, we need the run the tests each time the code changes, to make sure our changes don\\u2019t break it. \"), mdx(\"p\", null, \"The tests we currently start manually, but using a build server service, like Travis, these can be run automatically every time you change your code. \"), mdx(\"p\", null, \"Basically all we have to do, is take the exact steps you did in the previous section, and put them into the simple Travis configuration file format.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/travisci.png\",\n    \"alt\": \"Travis Config\"\n  }))), mdx(\"h2\", {\n    \"id\": \"the-travis-file\"\n  }, \"The Travis file\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo: required // Some installation actions require administrator-level access\\ndist: trusty // Builds a mininal machine to runs tests on\\n\\naddons:\\n  chrome: stable // installs latest stable Chrome\\n\\nlanguage: node_js // define primary platform language\\n\\nnode_js:\\n  - '11' // define primary platform language version\\n  \\nbranches:\\n  only:\\n  - travis-ci // Specifies that only the 'travis-ci' branch will be used\\n  \\nbefore_script:\\n  - npm install selenium-webdriver // install selenium-webdriver to use browser from DOM level\\n  - npm install chromedriver // install chromedriver, the browser interaction service for Chrome\\n  - ./node_modules/.bin/chromedriver & // Run the browser interaction service\\n  \\nscript:\\n  - node test.js // run the tests\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We need to write small configuration file, so that when Travis pulls the code from your GitHub repo, it knows what to do.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The file is very simple for us, so create new file in your repo called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".travis.yml\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"After these steps are all in your code, and committed, a build process will automatically start on TravisCI\"))), mdx(\"h2\", {\n    \"id\": \"after-build\"\n  }, \"After build\"), mdx(\"p\", null, \"After build has completed. it will either Pass for Fail\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/travis-success.png\",\n    \"alt\": \"Add Repo\"\n  }))), mdx(\"h2\", {\n    \"id\": \"activate-travis-build-for-your-repo\"\n  }, \"Activate Travis build for your repo\"), mdx(\"p\", null, \"Go to your dashboard and search for your repo\"), mdx(\"p\", null, \"Then move switch on right so it turns green - your repo will now run through and build and test every time you change your code on GitHub.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/travis-add-repo.png\",\n    \"alt\": \"Add Repo\"\n  }))), mdx(\"h2\", {\n    \"id\": \"activate-travis-build-badge-to-your-readme\"\n  }, \"Activate Travis build badge to your README\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"[![Build Status]\\n(https://travis-ci.org/replace-this-with-your-github-userid/replace-this-with-your-repo-name.svg?branch=master)]\\n(https://travis-ci.org/replace-this-with-your-github-userid/replace-this-with-your-repo-name)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Add the following code to your README, and it will display the lastest Travis status for your code:\"))), mdx(\"h1\", {\n    \"id\": \"deployment\"\n  }, \"Deployment\"), mdx(\"p\", null, \"Now we know out build works on the build server, it\\u2019s time to deploy to Netlify, using our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \", so now we need to do a Pull Request from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"travis-ci\"), \" branch, which when merged will trigger a deploy to Netlify (we are now going to set that up).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Strictly this would not be a deployment to live website (which I am doing here for simplicity), it would be a deployment to a test website so we can check things visually before manually deploying to live website.\")), mdx(\"h2\", {\n    \"id\": \"netlify\"\n  }, \"Netlify\"), mdx(\"p\", null, \"Now log into \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://app.netlify.com\"\n  }), \"https://app.netlify.com\"), \" (you can use your GitHub account to do this)\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/netlify.png\",\n    \"alt\": \"Netlify\"\n  }))), mdx(\"h2\", {\n    \"id\": \"create-new-github-repo-connection\"\n  }, \"Create new GitHub repo connection\"), mdx(\"p\", null, \"Click the \\u201CNew site from Git\\u201D button, then click \\u201CGutHub\\u201D button (which will create connection between netlify and GitHub)\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/netlify-github.png\",\n    \"alt\": \"Netlify\"\n  }))), mdx(\"h2\", {\n    \"id\": \"create-new-deployment\"\n  }, \"Create new deployment\"), mdx(\"p\", null, \"Type in your repo name into search, then click on the repo link\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/netlify-new.png\",\n    \"alt\": \"Netlify\"\n  }))), mdx(\"h2\", {\n    \"id\": \"deploy-the-site\"\n  }, \"Deploy The Site\"), mdx(\"p\", null, \"Leave defaults, and click \\u201CDeploy site\\u201D\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/netlify-deploy.png\",\n    \"alt\": \"Netlify\"\n  }))), mdx(\"h2\", {\n    \"id\": \"deploy-history\"\n  }, \"Deploy history\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"1:32:38 AM: Waiting to build. Currently running 1 concurrent builds on your account\\n1:32:38 AM: Build ready to start\\n1:32:40 AM: build-image version: 324ec043422499a87b63cac1f1dabeefe6dca19d\\n1:32:40 AM: build-image tag: v3.0.2\\n1:32:40 AM: buildbot version: ef2e26260c41679f4cdeaebbf93370345c9fecf7\\n1:32:40 AM: Fetching cached dependencies\\n1:32:40 AM: Failed to fetch cache, continuing with build\\n1:32:40 AM: Starting to prepare the repo for build\\n1:32:41 AM: No cached dependencies found. Cloning fresh repo\\n1:32:41 AM: git clone https://github.com/jaffamonkey/new-repo-name\\n1:32:41 AM: Preparing Git Reference refs/heads/master\\n1:32:42 AM: No build command found, continuing to publishing\\n1:32:42 AM: Starting to deploy site from '/'\\n1:32:42 AM: Creating deploy tree \\n1:32:42 AM: 2 new files to upload\\n1:32:42 AM: 0 new functions to upload\\n1:32:42 AM: Starting post processing\\n1:32:42 AM: Post processing done\\n1:32:43 AM: Site is live\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The output from the Netlify process to make you site live\"))), mdx(\"h1\", {\n    \"id\": \"the-code\"\n  }, \"The code\"), mdx(\"p\", null, \"The code for this workshop is on github:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jaffamonkey/starter-github-html-tests-travis-netlify\",\n    \"title\": \"GitHub Workshop Repo\"\n  }), \"GitHub Workshop Repo\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"jaffamonkey"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"9d5d4e77-9ddb-58b8-855c-ce3de996a9ec","excerpt":"Part of the \"zero to vanilla quality engineer\" workshop (zero, as in zero prior knowledge) I have tried to use as few tools and helpers asâ€¦","slug":"/trainingcourse","title":"Test engineering workhop","date":null,"siteTitle":"jaffamonkey","socialLinks":[{"name":"twitter","url":"https://twitter.com/jaffamonkey"},{"name":"github","url":"https://github.com/jaffamonkey"},{"name":"email","url":"mailto:paullittlebury@gmail.com"}],"previous":null,"next":{"node":{"id":"716e520d-9a68-5ad9-b01d-07e14f0593a7","excerpt":"Test automation Test automation is only part of the path that leads to better quality with CI and CD. How to test It's all about what'sâ€¦","slug":"/testengineering","title":"Test engineering","date":null}}}}}