(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('prism-react-renderer'), require('theme-ui'), require('prismjs/components/prism-core')) :
  typeof define === 'function' && define.amd ? define(['prism-react-renderer', 'theme-ui', 'prismjs/components/prism-core'], factory) :
  (global.prism = factory(global.Highlight,global.themeUi,global.Prism));
}(this, (function (Highlight,themeUi,Prism) {
  var Highlight__default = 'default' in Highlight ? Highlight['default'] : Highlight;
  Prism = Prism && Prism.hasOwnProperty('default') ? Prism['default'] : Prism;

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var index = (function (_ref) {
    var children = _ref.children,
        outerClassName = _ref.className,
        prism = _ref.prism;

    var _outerClassName$repla = outerClassName.replace(/language-/, '').split(' '),
        _outerClassName$repla2 = _slicedToArray(_outerClassName$repla, 1),
        language = _outerClassName$repla2[0];

    return themeUi.jsx(Highlight__default, _extends({}, Highlight.defaultProps, {
      Prism: prism || Prism,
      code: children.trim(),
      language: language,
      theme: undefined
    }), function (_ref2) {
      var className = _ref2.className,
          style = _ref2.style,
          tokens = _ref2.tokens,
          getLineProps = _ref2.getLineProps,
          getTokenProps = _ref2.getTokenProps;
      return themeUi.jsx(themeUi.Styled.pre, {
        className: "".concat(outerClassName, " ").concat(className),
        style: style
      }, tokens.map(function (line, i) {
        return themeUi.jsx("div", getLineProps({
          line: line,
          key: i
        }), line.map(function (token, key) {
          return themeUi.jsx("span", _extends({}, getTokenProps({
            token: token,
            key: key
          }), {
            sx: {
              display: 'inline-block'
            }
          }));
        }));
      }));
    });
  });

  return index;

})));
//# sourceMappingURL=prism.umd.js.map
